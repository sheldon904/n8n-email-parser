{
  "name": "Email Triage Workflow",
  "active": false,
  "nodes": [
    {
      "id": "config-node",
      "name": "CONFIG",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [260, 300],
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "provider",
              "name": "provider",
              "type": "string",
              "value": "gmail"
            },
            {
              "id": "labelPrefix",
              "name": "labelPrefix",
              "type": "string", 
              "value": "Category"
            },
            {
              "id": "clientDomains",
              "name": "clientDomains",
              "type": "array",
              "value": "[\"ourclient1.com\",\"ourclient2.com\"]"
            },
            {
              "id": "vendorDomains", 
              "name": "vendorDomains",
              "type": "array",
              "value": "[\"intuit.com\",\"stripe.com\",\"hubspot.com\",\"salesforce.com\"]"
            },
            {
              "id": "vipEmails",
              "name": "vipEmails", 
              "type": "array",
              "value": "[\"ceo@myagency.com\",\"finance@myagency.com\"]"
            },
            {
              "id": "internalDomain",
              "name": "internalDomain",
              "type": "string",
              "value": "myagency.com"
            },
            {
              "id": "lowConfidence",
              "name": "lowConfidence",
              "type": "number",
              "value": "0.8"
            },
            {
              "id": "moveNonUrgentOutOfInbox", 
              "name": "moveNonUrgentOutOfInbox",
              "type": "boolean",
              "value": "true"
            },
            {
              "id": "digestRecipient",
              "name": "digestRecipient",
              "type": "string", 
              "value": "boss@myagency.com"
            },
            {
              "id": "anthropicEnabled",
              "name": "anthropicEnabled",
              "type": "boolean",
              "value": "false"
            },
            {
              "id": "enableSlack",
              "name": "enableSlack", 
              "type": "boolean",
              "value": "false"
            },
            {
              "id": "slackWebhookUrl",
              "name": "slackWebhookUrl",
              "type": "string",
              "value": ""
            }
          ]
        }
      }
    },
    {
      "id": "gmail-trigger",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [80, 200],
      "parameters": {
        "authentication": "oAuth2",
        "event": "messageReceived", 
        "simple": false,
        "filters": {
          "readStatus": "unread"
        }
      },
      "credentials": {
        "gmailOAuth2": {
          "id": "GMAIL OAUTH - BOSS",
          "name": "GMAIL OAUTH - BOSS"
        }
      }
    },
    {
      "id": "outlook-trigger",
      "name": "Outlook Trigger", 
      "type": "n8n-nodes-base.microsoftOutlookTrigger",
      "typeVersion": 1,
      "position": [80, 400],
      "parameters": {
        "event": "messageReceived",
        "output": "simple",
        "filters": {
          "readStatus": "unread" 
        }
      },
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "MS365 OAUTH - BOSS",
          "name": "MS365 OAUTH - BOSS"
        }
      }
    },
    {
      "id": "provider-gmail-check",
      "name": "Provider is gmail?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [260, 200],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "gmail",
              "rightValue": "gmail",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "provider-outlook-check", 
      "name": "Provider is outlook?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [260, 400],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "gmail",
              "rightValue": "outlook", 
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "merge-branches",
      "name": "Merge provider branches",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [440, 300],
      "parameters": {
        "mode": "append",
        "numberInputs": 2
      }
    },
    {
      "id": "embed-config",
      "name": "Embed CONFIG", 
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [600, 300],
      "parameters": {
        "functionCode": "for (let item of items) {\n  item.json._CONFIG = {\n    provider: 'gmail',\n    labelPrefix: 'Category',\n    clientDomains: ['ourclient1.com','ourclient2.com'],\n    vendorDomains: ['intuit.com','stripe.com','hubspot.com','salesforce.com'],\n    vipEmails: ['ceo@myagency.com','finance@myagency.com'],\n    internalDomain: 'myagency.com',\n    lowConfidence: 0.8,\n    moveNonUrgentOutOfInbox: true,\n    digestRecipient: 'boss@myagency.com',\n    anthropicEnabled: false,\n    enableSlack: false,\n    slackWebhookUrl: '',\n    nonUrgentCategories: ['Newsletters and promos','Sales pitches','Vendor and partner','Site notifications']\n  };\n}\nreturn items;"
      }
    },
    {
      "id": "normalize-email",
      "name": "Normalize Email",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [760, 300],
      "parameters": {
        "functionCode": "for (let item of items) {\n  const data = item.json;\n  let normalized = {};\n  \n  if (data.payload || data.id) {\n    const headers = data.payload?.headers || [];\n    const headerObj = {};\n    headers.forEach(header => {\n      headerObj[header.name.toLowerCase()] = header.value;\n    });\n    \n    normalized = {\n      id: data.id,\n      threadId: data.threadId,\n      subject: headerObj.subject || '',\n      from: headerObj.from || '',\n      fromDomain: (headerObj.from || '').split('@')[1] || '',\n      to: headerObj.to || '',\n      date: headerObj.date || data.internalDate,\n      textBody: data.snippet || '',\n      headers: headerObj,\n      hasCalendar: (headerObj['content-type'] || '').includes('text/calendar'),\n      listUnsubscribe: headerObj['list-unsubscribe'] || '',\n      returnPath: (headerObj['return-path'] || '').toLowerCase()\n    };\n  } else if (data.from && data.from.emailAddress) {\n    const headers = {};\n    if (data.internetMessageHeaders) {\n      data.internetMessageHeaders.forEach(header => {\n        headers[header.name.toLowerCase()] = header.value;\n      });\n    }\n    \n    normalized = {\n      id: data.id,\n      threadId: data.conversationId,\n      subject: data.subject || '',\n      from: data.from.emailAddress.address || '',\n      fromDomain: (data.from.emailAddress.address || '').split('@')[1] || '',\n      to: data.toRecipients?.map(r => r.emailAddress.address).join(',') || '',\n      date: data.receivedDateTime || data.sentDateTime,\n      textBody: data.bodyPreview || '',\n      headers: headers,\n      hasCalendar: (headers['content-type'] || '').includes('text/calendar'),\n      listUnsubscribe: headers['list-unsubscribe'] || '',\n      returnPath: (headers['return-path'] || '').toLowerCase()\n    };\n  } else {\n    normalized = data;\n  }\n  \n  if (data._CONFIG) {\n    normalized._CONFIG = data._CONFIG;\n  }\n  \n  item.json = normalized;\n}\nreturn items;"
      }
    },
    {
      "id": "heuristic-classifier",
      "name": "Heuristic Classifier",
      "type": "n8n-nodes-base.function", 
      "typeVersion": 1,
      "position": [920, 300],
      "parameters": {
        "functionCode": "for (let item of items) {\n  const email = item.json;\n  const config = email._CONFIG;\n  \n  let category = 'Spam';\n  let confidence = 0.5;\n  let reason = 'No matching rules';\n  let isVip = false;\n  \n  if (config && config.vipEmails && config.vipEmails.includes(email.from)) {\n    isVip = true;\n  }\n  \n  const subject = (email.subject || '').toLowerCase();\n  const textBody = (email.textBody || '').toLowerCase();\n  const fromDomain = email.fromDomain;\n  const returnPath = email.returnPath || '';\n  const listUnsubscribe = email.listUnsubscribe || '';\n  \n  if (returnPath.includes('mailer-daemon') || returnPath.includes('bounce') || \n      email.from.toLowerCase().includes('postmaster')) {\n    category = 'Bounces and delivery failures';\n    confidence = 0.95;\n    reason = 'Return-Path or From indicates bounce/delivery failure';\n  }\n  else if (config && config.internalDomain && fromDomain === config.internalDomain) {\n    category = 'Internal team';\n    confidence = 0.9;\n    reason = 'From internal domain';\n  }\n  else if (config && config.clientDomains && \n           config.clientDomains.some(domain => fromDomain.endsWith(domain))) {\n    category = 'Client communications';\n    confidence = 0.9;\n    reason = 'From client domain';\n  }\n  else if (config && config.vendorDomains && \n           config.vendorDomains.some(domain => fromDomain.endsWith(domain))) {\n    category = 'Vendor and partner';\n    confidence = 0.85;\n    reason = 'From vendor domain';\n  }\n  else if (/\\\\b(invoice|receipt|payment|paid|quote|estimate|po\\\\b|purchase order)/i.test(subject)) {\n    category = 'Billing and invoices';\n    confidence = 0.9;\n    reason = 'Subject contains billing keywords';\n  }\n  else if (/\\\\b(invite|invitation|meeting|rescheduled|calendar)/i.test(subject) || email.hasCalendar) {\n    category = 'Scheduling and calendar';\n    confidence = 0.85;\n    reason = 'Subject contains scheduling keywords or has calendar attachment';\n  }\n  else if (/\\\\b(otp|verification code|2fa|one[- ]time code)/i.test(subject) || \n           (subject.length < 80 && /\\\\b\\\\d{5,8}\\\\b/.test(subject + ' ' + textBody))) {\n    category = 'Security codes and verifications';\n    confidence = 0.9;\n    reason = 'Contains verification codes or OTP keywords';\n  }\n  else if (listUnsubscribe || /(unsubscribe|manage preferences|view in browser)/i.test(textBody)) {\n    category = 'Newsletters and promos';\n    confidence = 0.9;\n    reason = 'Contains unsubscribe links or has List-Unsubscribe header';\n  }\n  else if (email.from.startsWith('no-reply@') || email.from.startsWith('noreply@') || \n           email.from.startsWith('notifications@') || \n           /(wordpress|woocommerce|gravity forms?|form submission|backup complete|cron|uptime|monitor|smtp|php fatal|new user registration)/i.test(subject + ' ' + textBody)) {\n    category = 'Site notifications';\n    confidence = 0.9;\n    reason = 'From notification address or contains site-related keywords';\n  }\n  else if (/(quick question|idea for|partnership|demo|free trial|scale your|case study)/i.test(subject) || \n           /(book a call|schedule a demo)/i.test(textBody)) {\n    category = 'Sales pitches';\n    confidence = Math.min(0.8, confidence);\n    reason = 'Contains sales pitch keywords';\n  }\n  \n  item.json.category = category;\n  item.json.confidence = confidence;\n  item.json.reason = reason;\n  item.json.isVip = isVip;\n}\nreturn items;"
      }
    },
    {
      "id": "low-confidence-check",
      "name": "Low Confidence?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [1080, 300],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{$json.confidence}}",
              "rightValue": "={{$json._CONFIG.lowConfidence}}",
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            },
            {
              "leftValue": "={{$json._CONFIG.anthropicEnabled}}",
              "rightValue": true,
              "operator": {
                "type": "boolean", 
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "anthropic-classify",
      "name": "Anthropic Classify",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1240, 200],
      "parameters": {
        "method": "POST",
        "url": "https://api.anthropic.com/v1/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "={{$env.ANTHROPIC_API_KEY}}"
            },
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"claude-3-5-sonnet-20240620\",\n  \"max_tokens\": 128,\n  \"temperature\": 0,\n  \"system\": \"You are an email triage classifier. Respond with strict JSON only.\",\n  \"messages\": [{\n    \"role\": \"user\",\n    \"content\": [{\n      \"type\": \"text\",\n      \"text\": \"Choose exactly one category from this list: Client communications, Prospects and leads, Sales pitches, Vendor and partner, Site notifications, Billing and invoices, Scheduling and calendar, Internal team, Security codes and verifications, Bounces and delivery failures, Newsletters and promos, Spam. Use headers if present, especially List-Unsubscribe and Return-Path. Output JSON only as {\\\"category\\\":\\\"...\\\",\\\"confidence\\\":0 to 1,\\\"reason\\\":\\\"...\\\"}. Here is the email:\\nSubject: {{$json.subject}}\\nFrom: {{$json.from}}\\nHeaders: {{JSON.stringify($json.headers)}}\\nText: {{$json.textBody}}\"\n    }]\n  }]\n}"
      }
    },
    {
      "id": "parse-llm",
      "name": "Parse LLM",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1400, 200],
      "parameters": {
        "functionCode": "for (let item of items) {\n  try {\n    const response = item.json;\n    let assistantContent = '';\n    \n    if (response.content && response.content.length > 0) {\n      assistantContent = response.content[0].text || '';\n    } else if (response.choices && response.choices[0]) {\n      assistantContent = response.choices[0].message.content || '';\n    } else if (typeof response === 'string') {\n      assistantContent = response;\n    }\n    \n    const jsonMatch = assistantContent.match(/\\{[^}]+\\}/);\n    if (jsonMatch) {\n      const parsed = JSON.parse(jsonMatch[0]);\n      \n      if (parsed.category && parsed.confidence !== undefined) {\n        item.json.category = parsed.category;\n        item.json.confidence = parsed.confidence;\n        item.json.reason = parsed.reason || 'LLM classification';\n      }\n    }\n  } catch (error) {\n    item.json.reason = 'LLM parse failed';\n  }\n}\nreturn items;"
      }
    },
    {
      "id": "by-category-switch",
      "name": "By Category", 
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [1280, 300],
      "parameters": {
        "mode": "rules",
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Client communications",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Client communications"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Internal team",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Internal team"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Sales pitches",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Sales pitches"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "Other"
        }
      }
    },
    {
      "id": "log-transform",
      "name": "Log Transform",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1500, 300],
      "parameters": {
        "functionCode": "for (let item of items) {\n  const logEntry = {\n    timestamp: new Date().toISOString(),\n    from: item.json.from || '',\n    fromDomain: item.json.fromDomain || '',\n    subject: item.json.subject || '',\n    category: item.json.category || '',\n    confidence: item.json.confidence || 0\n  };\n  \n  item.json.logEntry = logEntry;\n}\nreturn items;"
      }
    },
    {
      "id": "gmail-actions",
      "name": "Gmail Actions",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1660, 300],
      "parameters": {
        "functionCode": "for (let item of items) {\n  const config = item.json._CONFIG;\n  const category = item.json.category;\n  const isVip = item.json.isVip;\n  const messageId = item.json.id;\n  \n  if (config.provider === 'gmail' && messageId) {\n    try {\n      const labelName = `${config.labelPrefix}/${category}`;\n      item.json.appliedLabel = labelName;\n      \n      if (config.moveNonUrgentOutOfInbox && \n          config.nonUrgentCategories.includes(category)) {\n        item.json.removedFromInbox = true;\n      }\n      \n      if (isVip && ['Client communications', 'Internal team'].includes(category)) {\n        item.json.starred = true;\n        \n        if (config.enableSlack && config.slackWebhookUrl) {\n          item.json.slackNotification = `VIP email from ${item.json.from}: ${item.json.subject}`;\n        }\n      }\n      \n    } catch (error) {\n      item.json.error = `Gmail action failed: ${error.message}`;\n    }\n  }\n}\nreturn items;"
      }
    },
    {
      "id": "cron-digest",
      "name": "Cron Digest",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [80, 800],
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyDay",
              "hour": 17,
              "minute": 30
            }
          ]
        }
      }
    },
    {
      "id": "digest-config",
      "name": "Digest CONFIG",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [240, 800],
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "_CONFIG",
              "name": "_CONFIG",
              "type": "object",
              "value": "={\"digestRecipient\": \"boss@myagency.com\", \"provider\": \"gmail\"}"
            }
          ]
        }
      }
    },
    {
      "id": "send-digest-gmail",
      "name": "Send Digest Gmail",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [400, 800],
      "parameters": {
        "resource": "message",
        "operation": "send",
        "sendTo": "boss@myagency.com",
        "subject": "Daily triage digest",
        "emailType": "html",
        "message": "<h2>Daily Email Triage Report</h2><p>Daily digest from automated email triage system.</p>"
      },
      "credentials": {
        "gmailOAuth2": {
          "id": "GMAIL OAUTH - BOSS",
          "name": "GMAIL OAUTH - BOSS"
        }
      }
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Provider is gmail?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Outlook Trigger": {
      "main": [
        [
          {
            "node": "Provider is outlook?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Provider is gmail?": {
      "main": [
        [
          {
            "node": "Merge provider branches",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Provider is outlook?": {
      "main": [
        [],
        [
          {
            "node": "Merge provider branches",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "CONFIG": {
      "main": [
        [
          {
            "node": "Embed CONFIG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge provider branches": {
      "main": [
        [
          {
            "node": "Embed CONFIG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embed CONFIG": {
      "main": [
        [
          {
            "node": "Normalize Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Email": {
      "main": [
        [
          {
            "node": "Heuristic Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Heuristic Classifier": {
      "main": [
        [
          {
            "node": "Low Confidence?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Low Confidence?": {
      "main": [
        [
          {
            "node": "Anthropic Classify",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "By Category",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Classify": {
      "main": [
        [
          {
            "node": "Parse LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse LLM": {
      "main": [
        [
          {
            "node": "By Category",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "By Category": {
      "main": [
        [
          {
            "node": "Log Transform",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Transform",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Transform",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Transform",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Transform": {
      "main": [
        [
          {
            "node": "Gmail Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cron Digest": {
      "main": [
        [
          {
            "node": "Digest CONFIG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Digest CONFIG": {
      "main": [
        [
          {
            "node": "Send Digest Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}
{
  "name": "Email Triage Workflow",
  "active": false,
  "nodes": [
    {
      "id": "config-node",
      "name": "CONFIG",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [260, 300],
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "provider",
              "name": "provider",
              "type": "string",
              "value": "gmail"
            },
            {
              "id": "labelPrefix",
              "name": "labelPrefix",
              "type": "string",
              "value": "Category"
            },
            {
              "id": "clientDomains",
              "name": "clientDomains",
              "type": "array",
              "value": "[\"ourclient1.com\",\"ourclient2.com\"]"
            },
            {
              "id": "vendorDomains",
              "name": "vendorDomains",
              "type": "array",
              "value": "[\"intuit.com\",\"stripe.com\",\"hubspot.com\",\"salesforce.com\"]"
            },
            {
              "id": "vipEmails",
              "name": "vipEmails",
              "type": "array",
              "value": "[\"ceo@myagency.com\",\"finance@myagency.com\"]"
            },
            {
              "id": "internalDomain",
              "name": "internalDomain",
              "type": "string",
              "value": "myagency.com"
            },
            {
              "id": "lowConfidence",
              "name": "lowConfidence",
              "type": "number",
              "value": "0.8"
            },
            {
              "id": "moveNonUrgentOutOfInbox",
              "name": "moveNonUrgentOutOfInbox",
              "type": "boolean",
              "value": "true"
            },
            {
              "id": "timezone",
              "name": "timezone",
              "type": "string",
              "value": "America/New_York"
            },
            {
              "id": "digestHour",
              "name": "digestHour",
              "type": "number",
              "value": "17"
            },
            {
              "id": "digestMinute",
              "name": "digestMinute",
              "type": "number",
              "value": "30"
            },
            {
              "id": "enableSlack",
              "name": "enableSlack",
              "type": "boolean",
              "value": "false"
            },
            {
              "id": "slackWebhookUrl",
              "name": "slackWebhookUrl",
              "type": "string",
              "value": ""
            },
            {
              "id": "anthropicEnabled",
              "name": "anthropicEnabled",
              "type": "boolean",
              "value": "false"
            },
            {
              "id": "anthropicModel",
              "name": "anthropicModel",
              "type": "string",
              "value": "claude-3-5-sonnet-20240620"
            },
            {
              "id": "anthropicApiKey",
              "name": "anthropicApiKey",
              "type": "string",
              "value": "={{$env.ANTHROPIC_API_KEY}}"
            },
            {
              "id": "digestRecipient",
              "name": "digestRecipient",
              "type": "string",
              "value": "boss@myagency.com"
            },
            {
              "id": "nonUrgentCategories",
              "name": "nonUrgentCategories",
              "type": "array",
              "value": "[\"Newsletters and promos\",\"Sales pitches\",\"Vendor and partner\",\"Site notifications\"]"
            }
          ]
        }
      }
    },
    {
      "id": "gmail-trigger",
      "name": "Gmail Trigger",
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [80, 200],
      "parameters": {
        "authentication": "oAuth2",
        "event": "messageReceived",
        "simple": false,
        "filters": {
          "readStatus": "unread"
        }
      },
      "credentials": {
        "gmailOAuth2": {
          "id": "GMAIL OAUTH - BOSS",
          "name": "GMAIL OAUTH - BOSS"
        }
      }
    },
    {
      "id": "outlook-trigger",
      "name": "Outlook Trigger",
      "type": "n8n-nodes-base.microsoftOutlookTrigger",
      "typeVersion": 1,
      "position": [80, 400],
      "parameters": {
        "event": "messageReceived",
        "output": "simple",
        "filters": {
          "readStatus": "unread"
        }
      },
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "MS365 OAUTH - BOSS",
          "name": "MS365 OAUTH - BOSS"
        }
      }
    },
    {
      "id": "provider-gmail-check",
      "name": "Provider is gmail?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [460, 200],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{$json._CONFIG.provider}}",
              "rightValue": "gmail",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "provider-outlook-check",
      "name": "Provider is outlook?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [460, 400],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{$json._CONFIG.provider}}",
              "rightValue": "outlook",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "embed-config",
      "name": "Embed CONFIG",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [720, 300],
      "parameters": {
        "functionCode": "// Embed CONFIG values into each item for easy access in expressions\nfor (let item of items) {\n  // Get config from the first item (CONFIG node output)\n  if (!item.json._CONFIG && items[0] && items[0].json) {\n    item.json._CONFIG = {\n      provider: \"gmail\",\n      labelPrefix: \"Category\",\n      clientDomains: [\"ourclient1.com\",\"ourclient2.com\"],\n      vendorDomains: [\"intuit.com\",\"stripe.com\",\"hubspot.com\",\"salesforce.com\"],\n      vipEmails: [\"ceo@myagency.com\",\"finance@myagency.com\"],\n      internalDomain: \"myagency.com\",\n      lowConfidence: 0.8,\n      moveNonUrgentOutOfInbox: true,\n      timezone: \"America/New_York\",\n      digestHour: 17,\n      digestMinute: 30,\n      enableSlack: false,\n      slackWebhookUrl: \"\",\n      anthropicEnabled: false,\n      anthropicModel: \"claude-3-5-sonnet-20240620\",\n      anthropicApiKey: process.env.ANTHROPIC_API_KEY || \"\",\n      digestRecipient: \"boss@myagency.com\",\n      nonUrgentCategories: [\"Newsletters and promos\",\"Sales pitches\",\"Vendor and partner\",\"Site notifications\"]\n    };\n  }\n}\n\nreturn items;"
      }
    },
    {
      "id": "merge-branches",
      "name": "Merge provider branches",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [640, 300],
      "parameters": {
        "mode": "append",
        "numberInputs": 2
      }
    },
    {
      "id": "normalize-email",
      "name": "Normalize Email",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [880, 300],
      "parameters": {
        "functionCode": "// Normalize email data into unified format\nfor (let item of items) {\n  const data = item.json;\n  let normalized = {};\n  \n  // Check if this is Gmail or Outlook data\n  if (data.payload || data.id) {\n    // Gmail format\n    const headers = data.payload?.headers || [];\n    const headerObj = {};\n    \n    // Convert headers array to object with lowercase keys\n    headers.forEach(header => {\n      headerObj[header.name.toLowerCase()] = header.value;\n    });\n    \n    normalized = {\n      id: data.id,\n      threadId: data.threadId,\n      subject: headerObj.subject || '',\n      from: headerObj.from || '',\n      fromDomain: (headerObj.from || '').split('@')[1] || '',\n      to: headerObj.to || '',\n      cc: headerObj.cc || '',\n      date: headerObj.date || data.internalDate,\n      textBody: data.snippet || '',\n      htmlBody: data.payload?.parts?.find(p => p.mimeType === 'text/html')?.body?.data || '',\n      headers: headerObj,\n      hasCalendar: (headerObj['content-type'] || '').includes('text/calendar'),\n      listUnsubscribe: headerObj['list-unsubscribe'] || '',\n      returnPath: (headerObj['return-path'] || '').toLowerCase()\n    };\n  } else if (data.from && data.from.emailAddress) {\n    // Outlook format\n    const headers = {};\n    if (data.internetMessageHeaders) {\n      data.internetMessageHeaders.forEach(header => {\n        headers[header.name.toLowerCase()] = header.value;\n      });\n    }\n    \n    normalized = {\n      id: data.id,\n      threadId: data.conversationId,\n      subject: data.subject || '',\n      from: data.from.emailAddress.address || '',\n      fromDomain: (data.from.emailAddress.address || '').split('@')[1] || '',\n      to: data.toRecipients?.map(r => r.emailAddress.address).join(',') || '',\n      cc: data.ccRecipients?.map(r => r.emailAddress.address).join(',') || '',\n      date: data.receivedDateTime || data.sentDateTime,\n      textBody: data.bodyPreview || '',\n      htmlBody: data.body?.content || '',\n      headers: headers,\n      hasCalendar: (data.body?.contentType || '').includes('text/calendar') || (headers['content-type'] || '').includes('text/calendar'),\n      listUnsubscribe: headers['list-unsubscribe'] || '',\n      returnPath: (headers['return-path'] || '').toLowerCase()\n    };\n  } else {\n    // Fallback - assume already normalized or raw data\n    normalized = data;\n  }\n  \n  // Preserve _CONFIG\n  if (data._CONFIG) {\n    normalized._CONFIG = data._CONFIG;\n  }\n  \n  item.json = normalized;\n}\n\nreturn items;"
      }
    },
    {
      "id": "heuristic-classifier",
      "name": "Heuristic Classifier",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1040, 300],
      "parameters": {
        "functionCode": "// Heuristic email classifier\nfor (let item of items) {\n  const email = item.json;\n  const config = email._CONFIG;\n  \n  let category = 'Spam';\n  let confidence = 0.5;\n  let reason = 'No matching rules';\n  let isVip = false;\n  \n  // Check if VIP email\n  if (config && config.vipEmails && config.vipEmails.includes(email.from)) {\n    isVip = true;\n  }\n  \n  const subject = (email.subject || '').toLowerCase();\n  const textBody = (email.textBody || '').toLowerCase();\n  const fromDomain = email.fromDomain;\n  const returnPath = email.returnPath || '';\n  const listUnsubscribe = email.listUnsubscribe || '';\n  \n  // Rule 1: Bounces and delivery failures\n  if (returnPath.includes('mailer-daemon') || returnPath.includes('bounce') || \n      email.from.toLowerCase().includes('postmaster')) {\n    category = 'Bounces and delivery failures';\n    confidence = 0.95;\n    reason = 'Return-Path or From indicates bounce/delivery failure';\n  }\n  // Rule 2: Internal team\n  else if (config && config.internalDomain && fromDomain === config.internalDomain) {\n    category = 'Internal team';\n    confidence = 0.9;\n    reason = 'From internal domain';\n  }\n  // Rule 3: Client communications\n  else if (config && config.clientDomains && \n           config.clientDomains.some(domain => fromDomain.endsWith(domain))) {\n    category = 'Client communications';\n    confidence = 0.9;\n    reason = 'From client domain';\n  }\n  // Rule 4: Vendor and partner\n  else if (config && config.vendorDomains && \n           config.vendorDomains.some(domain => fromDomain.endsWith(domain))) {\n    category = 'Vendor and partner';\n    confidence = 0.85;\n    reason = 'From vendor domain';\n  }\n  // Rule 5: Billing and invoices\n  else if (/\\b(invoice|receipt|payment|paid|quote|estimate|po\\b|purchase order)/i.test(subject)) {\n    category = 'Billing and invoices';\n    confidence = 0.9;\n    reason = 'Subject contains billing keywords';\n  }\n  // Rule 6: Scheduling and calendar\n  else if (/\\b(invite|invitation|meeting|rescheduled|calendar)/i.test(subject) || email.hasCalendar) {\n    category = 'Scheduling and calendar';\n    confidence = 0.85;\n    reason = 'Subject contains scheduling keywords or has calendar attachment';\n  }\n  // Rule 7: Security codes and verifications\n  else if (/\\b(otp|verification code|2fa|one[- ]time code)/i.test(subject) || \n           (subject.length < 80 && /\\b\\d{5,8}\\b/.test(subject + ' ' + textBody))) {\n    category = 'Security codes and verifications';\n    confidence = 0.9;\n    reason = 'Contains verification codes or OTP keywords';\n  }\n  // Rule 8: Newsletters and promos\n  else if (listUnsubscribe || /(unsubscribe|manage preferences|view in browser)/i.test(textBody)) {\n    category = 'Newsletters and promos';\n    confidence = 0.9;\n    reason = 'Contains unsubscribe links or has List-Unsubscribe header';\n  }\n  // Rule 9: Site notifications\n  else if (email.from.startsWith('no-reply@') || email.from.startsWith('noreply@') || \n           email.from.startsWith('notifications@') || \n           /(wordpress|woocommerce|gravity forms?|form submission|backup complete|cron|uptime|monitor|smtp|php fatal|new user registration)/i.test(subject + ' ' + textBody)) {\n    category = 'Site notifications';\n    confidence = 0.9;\n    reason = 'From notification address or contains site-related keywords';\n  }\n  // Rule 10: Sales pitches\n  else if (/(quick question|idea for|partnership|demo|free trial|scale your|case study)/i.test(subject) || \n           /(book a call|schedule a demo)/i.test(textBody)) {\n    category = 'Sales pitches';\n    confidence = Math.min(0.8, confidence); // Max 0.8 for sales pitches\n    reason = 'Contains sales pitch keywords';\n  }\n  \n  // Add classification results to item\n  item.json.category = category;\n  item.json.confidence = confidence;\n  item.json.reason = reason;\n  item.json.isVip = isVip;\n}\n\nreturn items;"
      }
    },
    {
      "id": "low-confidence-check",
      "name": "Low Confidence?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [1200, 300],
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{$json.confidence}}",
              "rightValue": "={{$json._CONFIG.lowConfidence}}",
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            },
            {
              "leftValue": "={{$json._CONFIG.anthropicEnabled}}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        }
      }
    },
    {
      "id": "anthropic-classify",
      "name": "Anthropic Classify",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1360, 200],
      "parameters": {
        "method": "POST",
        "url": "https://api.anthropic.com/v1/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "={{$json._CONFIG.anthropicApiKey}}"
            },
            {
              "name": "anthropic-version",
              "value": "2023-06-01"
            },
            {
              "name": "content-type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"{{$json._CONFIG.anthropicModel}}\",\n  \"max_tokens\": 128,\n  \"temperature\": 0,\n  \"system\": \"You are an email triage classifier. Respond with strict JSON only.\",\n  \"messages\": [{\n    \"role\": \"user\",\n    \"content\": [{\n      \"type\": \"text\",\n      \"text\": \"Choose exactly one category from this list: Client communications, Prospects and leads, Sales pitches, Vendor and partner, Site notifications, Billing and invoices, Scheduling and calendar, Internal team, Security codes and verifications, Bounces and delivery failures, Newsletters and promos, Spam. Use headers if present, especially List-Unsubscribe and Return-Path. Output JSON only as {\\\"category\\\":\\\"...\\\",\\\"confidence\\\":0 to 1,\\\"reason\\\":\\\"...\\\"}. Here is the email:\\nSubject: {{$json.subject}}\\nFrom: {{$json.from}}\\nHeaders: {{JSON.stringify($json.headers)}}\\nText: {{$json.textBody}}\"\n    }]\n  }]\n}"
      }
    },
    {
      "id": "parse-llm",
      "name": "Parse LLM",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1520, 200],
      "parameters": {
        "functionCode": "// Parse LLM response and update classification\nfor (let item of items) {\n  try {\n    // Get the assistant's content from Claude response\n    const response = item.json;\n    let assistantContent = '';\n    \n    if (response.content && response.content.length > 0) {\n      assistantContent = response.content[0].text || '';\n    } else if (response.choices && response.choices[0]) {\n      assistantContent = response.choices[0].message.content || '';\n    } else if (typeof response === 'string') {\n      assistantContent = response;\n    }\n    \n    // Try to parse JSON from assistant content\n    const jsonMatch = assistantContent.match(/\\{[^}]+\\}/);\n    if (jsonMatch) {\n      const parsed = JSON.parse(jsonMatch[0]);\n      \n      if (parsed.category && parsed.confidence !== undefined) {\n        item.json.category = parsed.category;\n        item.json.confidence = parsed.confidence;\n        item.json.reason = parsed.reason || 'LLM classification';\n      }\n    }\n  } catch (error) {\n    // Keep original heuristic values on parse failure\n    item.json.reason = 'LLM parse failed';\n  }\n}\n\nreturn items;"
      }
    },
    {
      "id": "by-category-switch",
      "name": "By Category",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [1400, 300],
      "parameters": {
        "mode": "rules",
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Client communications",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Client communications"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Prospects and leads",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Prospects and leads"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Sales pitches",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Sales pitches"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Vendor and partner",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Vendor and partner"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Site notifications",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Site notifications"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Billing and invoices",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Billing and invoices"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Scheduling and calendar",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Scheduling and calendar"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Internal team",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Internal team"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Security codes and verifications",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Security codes and verifications"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Bounces and delivery failures",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Bounces and delivery failures"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{$json.category}}",
                    "rightValue": "Newsletters and promos",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Newsletters and promos"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra",
          "renameFallbackOutput": "Spam"
        }
      }
    },
    {
      "id": "append-log-row",
      "name": "Append Log Row",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 2,
      "position": [1700, 300],
      "parameters": {
        "operation": "toFile",
        "fileFormat": "csv",
        "binaryPropertyName": "logData",
        "options": {
          "fileName": "/data/email_triage_log.csv",
          "headerRow": true
        }
      }
    },
    {
      "id": "cron-digest",
      "name": "Cron Digest",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [80, 800],
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyDay",
              "hour": 17,
              "minute": 30
            }
          ]
        }
      }
    },
    {
      "id": "read-log-file",
      "name": "Read Log File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [240, 800],
      "parameters": {
        "filePath": "/data/email_triage_log.csv",
        "dataPropertyName": "logData"
      }
    },
    {
      "id": "parse-csv",
      "name": "Parse CSV",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 2,
      "position": [400, 800],
      "parameters": {
        "operation": "fromFile",
        "fileFormat": "csv",
        "binaryPropertyName": "logData",
        "options": {
          "headerRow": true
        }
      }
    },
    {
      "id": "aggregate-today",
      "name": "Aggregate Today",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [560, 800],
      "parameters": {
        "functionCode": "// Aggregate last 24 hours of email data\nconst now = new Date();\nconst yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n\nconst todayItems = items.filter(item => {\n  const timestamp = new Date(item.json.timestamp);\n  return timestamp >= yesterday;\n});\n\nconst categories = {};\nconst senders = {};\nconst lowConfidenceItems = [];\n\ntodayItems.forEach(item => {\n  const category = item.json.category || 'Unknown';\n  const sender = item.json.from || 'Unknown';\n  const confidence = parseFloat(item.json.confidence || 0);\n  \n  // Count by category\n  categories[category] = (categories[category] || 0) + 1;\n  \n  // Count by sender\n  senders[sender] = (senders[sender] || 0) + 1;\n  \n  // Track low confidence items\n  if (confidence < 0.8) {\n    lowConfidenceItems.push({\n      from: sender,\n      subject: item.json.subject,\n      confidence: confidence\n    });\n  }\n});\n\n// Sort categories by count (desc)\nconst sortedCategories = Object.entries(categories)\n  .sort(([,a], [,b]) => b - a)\n  .slice(0, 20);\n\n// Sort senders by count (desc), top 10\nconst topSenders = Object.entries(senders)\n  .sort(([,a], [,b]) => b - a)\n  .slice(0, 10);\n\n// Limit low confidence items to 20\nconst limitedLowConfidence = lowConfidenceItems.slice(0, 20);\n\nconst summary = {\n  total: todayItems.length,\n  categories: sortedCategories,\n  topSenders: topSenders,\n  lowConfidenceItems: limitedLowConfidence,\n  timestamp: now.toISOString()\n};\n\nreturn [{ json: summary }];"
      }
    },
    {
      "id": "send-digest-gmail",
      "name": "Send Digest Gmail",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [800, 780],
      "parameters": {
        "resource": "message",
        "operation": "send",
        "sendTo": "={{$json._CONFIG?.digestRecipient || 'boss@myagency.com'}}",
        "subject": "Daily triage digest",
        "emailType": "html",
        "message": "=<h2>Daily Email Triage Report</h2>\n<p><strong>Total processed:</strong> {{$json.total}}</p>\n\n<h3>Categories</h3>\n<ul>\n{{$json.categories.map(([cat, count]) => `<li>${cat}: ${count}</li>`).join('')}}\n</ul>\n\n<h3>Top 10 Senders</h3>\n<ul>\n{{$json.topSenders.map(([sender, count]) => `<li>${sender}: ${count}</li>`).join('')}}\n</ul>\n\n<h3>Low Confidence Items ({{$json.lowConfidenceItems.length}})</h3>\n<ul>\n{{$json.lowConfidenceItems.map(item => `<li>From: ${item.from} - Subject: ${item.subject} (${item.confidence})</li>`).join('')}}\n</ul>"
      },
      "credentials": {
        "gmailOAuth2": {
          "id": "GMAIL OAUTH - BOSS",
          "name": "GMAIL OAUTH - BOSS"
        }
      }
    },
    {
      "id": "send-digest-outlook",
      "name": "Send Digest Outlook",
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [800, 820],
      "parameters": {
        "resource": "message",
        "operation": "send",
        "toRecipients": "={{$json._CONFIG?.digestRecipient || 'boss@myagency.com'}}",
        "subject": "Daily triage digest",
        "bodyContentType": "html",
        "bodyContent": "=<h2>Daily Email Triage Report</h2>\n<p><strong>Total processed:</strong> {{$json.total}}</p>\n\n<h3>Categories</h3>\n<ul>\n{{$json.categories.map(([cat, count]) => `<li>${cat}: ${count}</li>`).join('')}}\n</ul>\n\n<h3>Top 10 Senders</h3>\n<ul>\n{{$json.topSenders.map(([sender, count]) => `<li>${sender}: ${count}</li>`).join('')}}\n</ul>\n\n<h3>Low Confidence Items ({{$json.lowConfidenceItems.length}})</h3>\n<ul>\n{{$json.lowConfidenceItems.map(item => `<li>From: ${item.from} - Subject: ${item.subject} (${item.confidence})</li>`).join('')}}\n</ul>"
      },
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "MS365 OAUTH - BOSS",
          "name": "MS365 OAUTH - BOSS"
        }
      }
    }
  ],
  "connections": {
    "CONFIG": {
      "main": [
        [
          {
            "node": "Embed CONFIG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Provider is gmail?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Outlook Trigger": {
      "main": [
        [
          {
            "node": "Provider is outlook?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Provider is gmail?": {
      "main": [
        [
          {
            "node": "Merge provider branches",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Provider is outlook?": {
      "main": [
        [
          {
            "node": "Merge provider branches",
            "type": "main",
            "index": 1
          }
        ],
        []
      ]
    },
    "Merge provider branches": {
      "main": [
        [
          {
            "node": "Embed CONFIG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embed CONFIG": {
      "main": [
        [
          {
            "node": "Normalize Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Email": {
      "main": [
        [
          {
            "node": "Heuristic Classifier",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Heuristic Classifier": {
      "main": [
        [
          {
            "node": "Low Confidence?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Low Confidence?": {
      "main": [
        [
          {
            "node": "Anthropic Classify",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "By Category",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Classify": {
      "main": [
        [
          {
            "node": "Parse LLM",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse LLM": {
      "main": [
        [
          {
            "node": "By Category",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "By Category": {
      "main": [
        [
          {
            "node": "Append Log Row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Log Row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Log Row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Log Row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Log Row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Log Row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Log Row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Log Row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Log Row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Log Row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Log Row",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Append Log Row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Cron Digest": {
      "main": [
        [
          {
            "node": "Read Log File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Log File": {
      "main": [
        [
          {
            "node": "Parse CSV",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse CSV": {
      "main": [
        [
          {
            "node": "Aggregate Today",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Today": {
      "main": [
        [
          {
            "node": "Send Digest Gmail",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send Digest Outlook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}